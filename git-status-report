#!/usr/bin/ruby -W0 

require 'optparse'

def project_log(days, git_dir, options)
    lines = `GIT_DIR="#{git_dir}" git log --pretty=format:"%ae||%s||%ci||%h" --since="#{options[:days]} days ago"`
    project_name = File.basename(git_dir.delete('.git'))
    response_days = []
    responses_by_day = {}
    lines.each do | line |
        if (line =~ /#{options[:email]}/i )  
            components = line.split(/\|\|/)
            date = components[2]
            date.sub!(/(\S+).*/, '\1')
            if (not responses_by_day[date])
                responses_by_day[date] = []
                response_days.push(date)
            end
    #		
    #		# email, title, relative date
            if (not options[:verbose])
                responses_by_day[date].push(components[1])
            else 
                hash=components[3].chomp
                raw_details = `GIT_DIR="#{git_dir}" git log --pretty=format:"%s%n%n%b" #{hash} -1`.chomp
                response_details = ''
                
                raw_details.split(/\n/).each do | dl |
                    if (response_details)
                        response_details += "\t\t#{dl}\n"
                    else 
                        response_details = dl
                    end
                end
                responses_by_day[date].push(response_details)
            end
        end
    end

    puts "Status report for #{project_name} \"#{options[:email]}\" (last #{options[:days]} days)"
    if (options[:verbose])
        branches = `GIT_DIR="#{git_dir}" git branch --no-color`
        current_branch = nil
        branches.each do |bn|
            if (bn and bn =~ /\* (.*)/)
                current_branch = $1
                break
            end
        end
        puts "  - Generated from \"#{current_branch}\" branch."
    end
    if (response_days.length > 0)
        response_days.each do | date |
            
            puts date if not options[:simple]
            count = (responses_by_day[date].length > 1) ? responses_by_day[date].length : ''
            responses_by_day[date].each do | commit | 
                if (not options[:verbose])
                    puts "\t* #{commit}"
                else
                    if (count != '')
                        puts "\tcommit #{count}----------\n#{commit}"
                        count -= 1
                    else 
                        puts commit
                    end
                end
            end
        end
    else
        puts "No commits found for #{options[:email]}"
    end
end

options = {}

optparse = OptionParser.new do | opts |
	opts.banner = "Usage: git status-report [-e <email>][-d <days>]\nGenerates a status report for what you worked on for the past n days."
	opts.on("-e", "--email <email address>", "The email address of the committer to generate a report for. Defaults to your \"git config user.email\" address.") do |email|
		options[:email] = email
	end
	opts.on("-d", "--days <num days>", "The number of days to generate the report for. Defaults to past 6 days (one week)") do | days |
		options[:days] = days
	end
	opts.on("-s", "--simple", "Simpler output. Doesn't include the dates") do
		options[:simple] = true
	end
	opts.on("-v", "--verbose", "Verbose output includes details on each commit") do
		options[:verbose] = true
	end
	opts.on("-c", "--config", "Config file of multiple repository paths") do |config|
		options[:config] = config
	end
end

begin 
	optparse.parse!
rescue OptionParser::InvalidOption => e
	puts e
	puts optparse
	exit 1
end
if (not options[:email])
	options[:email] = `git config user.email`.chomp
	if (not options[:email])
		puts "You haven't configured an e-mail address for git. Please do so or specify one."
		puts optparse
		exit 1
	end
end
if (not options[:days])
	options[:days] = 6
end

# git directories to scan
git_dirs = []

# check for config file
config_file = options[:config] || File.expand_path('~/.git_status_report.config')

begin
    file = File.new(config_file, "r")
    while (line = file.gets)
        paths = `find #{line.strip} -type d -name .git`
        git_dirs = git_dirs | paths.split
    end
    file.close
rescue => e
    puts e
end

# add the cwd if applicable
pwd_git_path = File.expand_path('.git')
git_dirs += pwd_git_path if File.exists?(pwd_git_path)
git_dirs.uniq!

git_dirs.each do |git_dir|
    project_log(options[:days], git_dir, options)
    puts
end
    
